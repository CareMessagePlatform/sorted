= sorted

Sorted is a simple object that will take an sql order string and a url
sort string to let you sort large datasets over many pages (using
{will_paginate}[http://github.com/mislav/will_paginatea] or
{kaminari}[https://github.com/amatsuda/kaminari]) without loosing state.
Examples use {kaminari}[https://github.com/amatsuda/kaminari].

=== Gemfile

  gem 'sorted' '~> 0.3.9'

=== View

  link_to_sorted "Email", :email

This will make a url like this:

  http://myapp/users?sort=email_asc

or on the next page load when you then sort by something else....

  http://myapp/users?sort=name_asc!email_asc

=== Model

This will initially sort by email ascending:

  @users = User.sort(params[:sort], "email ASC").page(params[:page])

Or you can just clone the example app https://github.com/mynameisrufus/sorted_app.

==== Joins and includes

If you want to sort by a belongs to relationship, just provide sort
order as "table.column ASC|DESC". For example assuming the User model
belongs to a company:

  @users = User.joins(:company).sort(params[:sort], "companies.name ASC").page(params[:page])

When generating links using the +link_to_sorted+ method you should
specify the table for every attribute you use otherwise you will
probably get the ambiguous column name error.

  <th class="ui-state-default"><%= link_to_sorted "Total", 'items.total' %></th>
  <th class="ui-state-default"><%= link_to_sorted "User", 'users.name' %></th>

==== Typecasting and DB functions

Do your type casting and function calls in your select statement with an
alias to use Sorted, for example:

  # controller
  @users = User.select("income::BigInt as bg_income").sort(params[:sort], "bg_income ASC")
  
  # view
  <th class="ui-state-default"><%= link_to_sorted "Income", 'bg_income' %></th>

or to call a DB function:

  # controller
  @users = User.select("inet_aton(`ip_address`) AS in_ip").sort(params[:sort], "in_ip ASC")

  # view
  <th class="ui-state-default"><%= link_to_sorted "IP address", 'in_ip' %></th>

== Presentation

You might want to roll your own +link_to_sorted+ method to use jQuery ui
css classes for example, all you need is the sorted object.

  def link_to_sorted(name, order)
    dup_params = (request.get? && !params.nil?) ? params.dup : nil
    sorter     = ActionView::Base::SortedViewHelper.new(order, dup_params)
    css_class  = case sorter.css
                 when "sorted asc"
                   "ui-icon ui-icon-triangle-1-n"
                 when "sorted desc"
                   "ui-icon ui-icon-triangle-1-s"
                 when "sorted"
                   "ui-icon ui-icon-carat-2-n-s"
                 end
    link_to(content_tag(:span, nil, {:class => css_class}) + name.to_s, sorter.params)
  end

Tables are best displayed with alternating shades for each row, so add
an alternating class to you table rows using the rails +cycle+ method:

  <tr class="<%= cycle 'odd', 'even' %>">

== Rails 2.3.x

This gem works with rails 2.3.x but you will have to roll your own scope
and view helper.

Here is the named scope for your model(s):

  named_scope :sort, lambda { |sort, order|
    { :order =>  Sorted::Parser.new(sort, order).to_sql }
  }

and the application helper methods:

  def link_to_sorted(name, order, options = {})
    dup_params      = (request.get? && !params.nil?) ? params.dup : nil
    sorter          = Sorted::ViewHelpers::ActionView::SortedViewHelper.new(order, dup_params)
    options[:class] = [options[:class], sorter.css].join(' ').strip
    link_to(name.to_s, sorter.params, options)
  end
