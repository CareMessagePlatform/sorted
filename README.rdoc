= sorted

Sorted is a simple object that will take an sql order string and a url
sort string to let you sort large datasets over many pages (using
{will_paginate}[http://github.com/mislav/will_paginatea] so
{kaminari}[https://github.com/amatsuda/kaminari]) without loosing state.

Using Rails 3x it will create a sorted scope and a two view helpers

== Example

=== Gemfile

  gem 'sorted' '~> 0.3.9'

=== View

  link_to_sorted "Email", :email

This will make a url like this:

  http://myapp/users?sort=email_asc

or on the next page load when you then sort by something else....

  http://myapp/users?sort=name_asc!email_asc

=== Model

This will initially sort by email ascending:

  @users = User.sorted(params[:sort], "email ASC").page(params[:page])

Or you can just clone the example app https://github.com/mynameisrufus/sorted_app.

If you want to sort by a belongs_to relationship, just provide sort order as "RELATIONS.COLUMN ASC|DESC" where
RELATIONS is the name of the relationship table and COLUMN is an attribute in that table.  For example, 
assuming the User model belongs_to a :company.

  @users = User.sorted(params[:sort], "companies.name ASC").page(params[:page])

== Notes and typcasting and db function calls

Do your type casting and function calls in your select statement with an
alias to use Sorted, for example:

  @users = User.select("income::BigInt as bg_income").sort(params[:sort], "bg_income ASC")

or to call a db function:

  @users = User.select("inet_aton(`ip_address`) AS in_ip").sort(params[:sort], "in_ip ASC")

== Presentation

You might want to roll your own +link_to_sorted+ method to use jQuery ui css classes for example, all you need is the sorted object.

  def link_to_sorted(name, order)
    sorter    = sorted(order)
    css_class = case sorter.to_css
                when "sorted asc"
                  "ui-icon ui-icon-triangle-1-n"
                when "sorted desc"
                  "ui-icon ui-icon-triangle-1-s"
                when "sorted"
                  "ui-icon ui-icon-carat-2-n-s"
                end
    link_to(content_tag(:span, nil, {:class => css_class}) + name.to_s, sorter.params)
  end

Tables are best displayed with alternating shades for each row, so add
an alternating class to you table rows using the rails +cycle+ method:

  <tr class="<%= cycle 'odd', 'even' %>">

== Rails 2.3.x

This gem works with rails 2.3.x but you will have to roll your own scope and view helper.

Here is the named scope for your model(s):

  named_scope :sorted, lambda { |sort, default_order|
    { :order =>  Sorted::Sorter.new(sort, default_order).to_sql }
    { :order =>  Sorted::Sorter.new(sort, default_order).to_sql }
  }

and the the application helper methods:

  def sorted(order)
    Sorted::Sorter.new(order, (request.get? && !params.nil?) ? params.dup : nil).toggle
  end

  def link_to_sorted(name, order)
    sorter = sorted(order)
    link_to(name, sorter.params, {:class => sorter.to_css})
  end
