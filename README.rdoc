= sorted

Sorted is a simple object that will take an sql order string and a url sort string to let you sort large datasets over many pages (using {will_paginate}[http://github.com/mislav/will_paginate]) without loosing state.

Using Rails master it will create a `sorted` scope and a two view helpers

== Example

=== The view:

  link_to_sorted "Email", :email

This will make a url like this:

  http://myapp/users?sort=email_asc

Or on the next page load when you then sort by something else....

  http://myapp/users?sort=name_asc!email_asc

=== The model:

This will initially sort by email ascending:

  @users = User.sorted(:order => "email ASC", :sort => params[:sort]).paginate(:page => params[:page])

== Rails 2.3.x

This gem works with rails 2.3.x but you will have to roll your own scope and view helper

Here is the named scope:

  named_scope :sorted, lambda { |params|
    { :order =>  Sorted::Sorter.new(params[:order], {:sort => params[:sort]}).to_sql }
  }

And this in your application helper:

  def sorted(order)
    Sorted::Sorter.new(order, (request.get? && !params.nil?) ? params.dup : nil).toggle
  end

  def link_to_sorted(name, order)
    sorter = sorted(order)
    link_to(name, sorter.params, {:class => sorter.css_class})
  end
